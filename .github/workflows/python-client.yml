name: Python Client CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'examples/clients/python/**'
      - '.github/workflows/python-client.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'examples/clients/python/**'
      - '.github/workflows/python-client.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  lint:
    name: Lint Python Client
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      working-directory: ./examples/clients/python
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint
        pip install -e .
    
    - name: Lint with flake8
      working-directory: ./examples/clients/python
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Lint with pylint
      working-directory: ./examples/clients/python
      run: |
        pylint arpguard_client/ arpguard_cli.py --disable=C0103,C0111,R0903,R0913,W0703

  test:
    name: Test Python Client
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      working-directory: ./examples/clients/python
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -e .
    
    - name: Run tests
      working-directory: ./examples/clients/python
      run: |
        pytest --cov=arpguard_client --cov-report=xml
      env:
        ARPGUARD_API_URL: ${{ secrets.ARPGUARD_API_URL || 'https://api.arpguard.io' }}
        ARPGUARD_API_KEY: ${{ secrets.ARPGUARD_API_KEY || 'test-key' }}
        ARPGUARD_API_SECRET: ${{ secrets.ARPGUARD_API_SECRET || 'test-secret' }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./examples/clients/python/coverage.xml
        fail_ci_if_error: false

  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      working-directory: ./examples/clients/python
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      working-directory: ./examples/clients/python
      run: |
        python -m build
    
    - name: Check package
      working-directory: ./examples/clients/python
      run: |
        twine check dist/*
    
    - name: Upload package as artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: ./examples/clients/python/dist/

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}/arpguard-cli
        tags: |
          type=raw,value=latest
          type=sha,format=short
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./examples/clients/python
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [build-package, build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')
    
    steps:
    - name: Download package artifact
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/* 